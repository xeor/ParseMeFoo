#!/usr/bin/env python

import os
import sys
import pickle
import datetime
import time

import challenges

class Handler:
    challenges = {}
    userDB = 'user.db'

    def __init__(self, lines = 10):
        self.lines = lines
        self.ourDirectory = os.path.dirname(os.path.abspath(__file__))
        self.tmpDirectory = os.path.join(self.ourDirectory, 'tmp')
        if not os.path.isdir(self.tmpDirectory):
            os.mkdir(self.tmpDirectory)
        self.getChallenges()
        self.handleParams()

    def getChallenges(self):
        for root, dirs, files in os.walk('challenges'):
            for fileName in files:
                if fileName.endswith('.py') and not fileName.startswith('_'):
                    challengeName = fileName.replace('.py', '')

                    # Grab and import the Challenge class for the current challenge name, if it exists
                    try:
                        self.challenges[challengeName] = getattr(__import__('challenges.%s' % challengeName), challengeName).Challenge()
                    except AttributeError:
                        pass

    def handleParams(self):
        arg = sys.argv
        if len(arg) <= 1:
            self.help()
            return None

        if arg[1] == 'list':
            self.listChallenges()
            return None

        if arg[1] in self.challenges.keys():
            challengeArg = arg[2] if len(arg) > 2 else None
            self.handleChallenge(arg[1], challengeArg)
            return None

        self.help()

    def getSolved(self):
        dbPath = os.path.join(self.ourDirectory, self.userDB)
        if os.path.isfile(dbPath):
            dbObj = open(dbPath, 'rb')
            return pickle.load(dbObj)
        else:
            return {}

    def recordSolved(self, challenge):
        dbPath = os.path.join(self.ourDirectory, self.userDB)
        if os.path.isfile(dbPath):
            dbObj = open(dbPath, 'r+')
            try:
                recorded = pickle.load(dbObj)
            except:
                print 'Got an error reading %s, delete it or fix it.. pickle.load is unable to parse it.. :('
                print
        else:
            dbObj = open(dbPath, 'w+')
            recorded = {}

        datetimestr = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        recorded[challenge] = {'solved': True, 'timedate': datetimestr}

        # Delete the file content
        dbObj.seek(0)
        dbObj.truncate()

        pickle.dump(recorded, dbObj)
        dbObj.close()

    def handleChallenge(self, challenge, arg):
        challengeObj = self.challenges[challenge]
        if arg == 'start':
            lines = self.lines
            output = []
            solution = []
            while lines != 0:
                line = getattr(challengeObj, 'generate')()
                output.append(line)
                solution.append(getattr(challengeObj, 'parse')(line))

                lines -= 1

            tmpFileSolution = open(os.path.join(self.tmpDirectory, '%s-solution.tmp' % challenge), 'w')
            tmpFileSolution.write(pickle.dumps(solution))
            tmpFileSolution.close()

            print '\n'.join(output)
            return True

        if arg == 'done':
            tmpFileSolution = open(os.path.join(self.tmpDirectory, '%s-solution.tmp' % challenge), 'r+')

            # FIXME, bug here, getting EOFError in some conditions, sometimes
            time.sleep(0.2) # Check if its a racecondition.. temp fix?
            realSolution = pickle.load(tmpFileSolution)
            tmpFileSolution.close()

            userSolution = [ s.strip() for s in sys.stdin.readlines() ]

            if realSolution == userSolution:
                self.recordSolved(challenge)
                print 'You did it!'
            else:
                print 'You failed, FOO!'

            return True

        if arg == 'help':
            output = []
            solution = []
            for i in range(4):
                line = getattr(challengeObj, 'generate')()
                output.append(line)
                solution.append(getattr(challengeObj, 'parse')(line))

            print 'Usage: %s %s [start | done | help]' % (sys.argv[0], challenge)
            if hasattr(challengeObj, 'help'):
                print
                print getattr(challengeObj, 'help')()
            print
            print '## Example output ##'
            print '\n'.join(output)
            print
            print '## Example input ##'
            print '\n'.join(solution)
            return True

        if arg == 'test':
            # Send two examples and solutions to stderr, and the same
            # two to stdout, so the user can test live and see what differs
            pass

        self.help(challenge)

    def help(self, challenge = None):
        print 'Usage: %s [ help | list | [ challangeName | [ start | done | help ]]]' % (sys.argv[0],)

    def listChallenges(self):
        solved = self.getSolved().keys()
        challengeList = {'solved': [], 'unsolved': []}

        for challenge in self.challenges:
            challengeObj = self.challenges[challenge]

            if getattr(challengeObj, 'description'):
                description = '\t(%s)' % getattr(challengeObj, 'description')
            else:
                description = ''

            challengeInfo = '%s%s' % (challenge, description)
            if challenge in solved:
                challengeList['solved'].append(challengeInfo)
            else:
                challengeList['unsolved'].append(challengeInfo)

        for status in challengeList:
            print '%s:' % status
            for c in challengeList[status]:
                print '  %s' % c
            print

if __name__ == '__main__':
    handler = Handler()
